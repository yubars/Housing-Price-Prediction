# -*- coding: utf-8 -*-
"""Step 6 Multiple Regression Models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-IPU_1mLb2YO93mal4CwxMt-Hqyw6qaV
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Support Vector Machine
from sklearn.svm import SVR

# KNN
from sklearn.neighbors import KNeighborsRegressor

# Decision Tree
from sklearn.tree import DecisionTreeRegressor

# ANN
from keras.models import Sequential
from keras.layers import Dense

# RandomForest 
from sklearn.ensemble import RandomForestRegressor

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/outlierRemovedProcessedData.csv")

data.head()

X = data.iloc[:, :-1]
y = data["housePrice"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=27)
X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, test_size=0.3, random_state=27)

def ANN():
  model = Sequential()
  model.add(Dense(input_dim=24, units=64, activation=None))
  model.add(Dense(units=32, activation=None))
  model.add(Dense(units=16, activation=None))
  model.add(Dense(units=1, activation=None))
  model.compile(loss="mse", metrics=['mae'], optimizer='adam')
  return model

models = {
          "KNN": KNeighborsRegressor(n_neighbors=5),
          "ANN": ANN(),
          "Decision Trees": DecisionTreeRegressor(max_depth=15),
          "Random Forest": RandomForestRegressor(max_depth=23)
          }

def save_and_display(y_true, y_pred, name, prompt):
  plt.scatter(y_true, y_pred, c='w', edgecolors='b')
  plt.plot(y_true, y_true, c='r')
  plt.title(f"Calibration Plot for {name} on {prompt} Data")
  plt.xlabel("Actual House Price")
  plt.ylabel("Predicted House Price")
  plt.savefig(f"Output/cp_{name}_{prompt}.png", dpi=300)
  plt.show()

import os
if not os.path.exists("Output"):
  os.mkdir("Output")

r2_scores = dict()

for name, model in models.items():
  print(f"Working on {name} Regression") 
  if name == "ANN":
    y_train_ann = y_train/100000
    model.fit(X_train, y_train_ann, epochs=15, verbose=1)
  else:
    model.fit(X_train, y_train)

  train_pred = model.predict(X_train)
  y_pred = model.predict(X_test)

  if name=="ANN":
    train_pred = train_pred * 100000
    y_pred = y_pred * 100000

  train_r2 = round(r2_score(y_train, train_pred), 3)
  print(f"Train R2 using {name}: {train_r2}")

  test_r2 = round(r2_score(y_test, y_pred), 3)
  print(f"Test R2 using {name}: {test_r2}")
  save_and_display(y_train, train_pred, name, "Training")
  save_and_display(y_test, y_pred, name, "Test")
  r2_scores[name] = [train_r2, test_r2]

r2_scores

def comparision(x_plot, y_plot, prompt):
  plt.figure(figsize=(18,8))
  plt.title(f"R2 Scores on {prompt} Data")
  plt.xlabel("Algorithm")
  plt.ylabel("R2 Score")
  g=sns.barplot(x_plot, y_plot)
  for i,p in enumerate(g.patches):
          percentage = '{:.3f}'.format(y_plot[i])
          x1 = p.get_x() + p.get_width() - 0.5
          y1 = p.get_y() + p.get_height() + 0.02
          g.annotate(percentage, (x1, y1))
  plt.savefig(f"Output/comparison_{prompt}.png", dpi=300)
  plt.show()

x_plot = list(r2_scores.keys())
y_plot_train = [train for train, test in r2_scores.values()]
y_plot_test = [test for train, test in r2_scores.values()]
comparision(x_plot, y_plot_train, "Train")

comparision(x_plot, y_plot_test, "Test")

from joblib import dump

dump(model, "final_rf_model.joblib")

